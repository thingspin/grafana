{
    "id": "MODBUS Flow Format",
    "label": "{{.Params.FlowId}}",
    "info": "",
    "nodes":[
        {
            "id": "TS-MODBUS-COMMENT-{{.Params.FlowId}}",
            "type": "comment",
            "z": "e89bb8fb.ce3f08",
            "name": "{{.Params.FlowName}}",
            "info": "",
            "x": 100,
            "y": 20,
            "wires": []
        },
        {
            "id": "TS-MODBUS-STATE-{{.Params.FlowId}}",
            "type": "status",
            "z": "8900476a.91f358",
            "name": "",
            "scope": [
                "TS-MODBUS-GETTER-CONN-{{.Params.FlowId}}"
            ],
            "x": 100,
            "y": 120,
            "wires": [
                [
                    "TS-MODBUS-DEBUG-3-{{.Params.FlowId}}",
                    "TS-MODBUS-STATUS-FUNC-ID-{{.Params.FlowId}}"
                ]
            ]
        },
        {
            "id": "TS-MODBUS-DEBUG-3-{{.Params.FlowId}}",
            "type": "debug",
            "z": "8900476a.91f358",
            "name": "",
            "active": false,
            "tosidebar": true,
            "console": false,
            "tostatus": false,
            "complete": "true",
            "targetType": "full",
            "x": 310,
            "y": 120,
            "wires": []
        },
        {
            "id": "TS-MODBUS-STATUS-FUNC-ID-{{.Params.FlowId}}",
            "type": "function",
            "z": "128c8c3f.3d9e44",
            "name": "",
            "func": "const { status } = msg;\nconst stat = global.get('ts-status') || {};\nif(stat[status.source.name] !== status.fill) {\n    msg.payload = status.fill;\n}\nstat[status.source.name] = status.fill;\nglobal.set('ts-status', stat);\nreturn msg;",
            "outputs": 1,
            "noerr": 0,
            "x": 310,
            "y": 60,
            "wires": [
                [
                    "TS-MODBUS-STATUS-MQTT-OUT-ID-{{.Params.FlowId}}"
                ]
            ]
        },
        {
            "id": "TS-MODBUS-STATUS-MQTT-OUT-ID-{{.Params.FlowId}}",
            "type": "mqtt out",
            "z": "128c8c3f.3d9e44",
            "name": "",
            "topic": "/thingspin/connect/{{.Params.FlowId}}/status",
            "qos": "2",
            "retain": "true",
            "broker": "TS-MQTT-LISTENER-ID-{{.Params.FlowId}}",
            "x": 530,
            "y": 60,
            "wires": []
        },
        {
            "id": "TS-MQTT-LISTENER-ID-{{.Params.FlowId}}",
            "type": "mqtt-broker",
            "z": "128c8c3f.3d9e44",
            "broker": "{{.TsSettings.Mqtt.Host}}",
            "port": "{{.TsSettings.Mqtt.Port}}",
            "clientid": "",
            "usetls": false,
            "compatmode": true,
            "keepalive": "60",
            "cleansession": true,
            "birthTopic": "",
            "birthQos": "0",
            "birthPayload": "",
            "closeTopic": "",
            "closeQos": "0",
            "closePayload": "",
            "willTopic": "",
            "willQos": "0",
            "willPayload": ""
        },
        {
            "id": "TS-MODBUS-INJECT-{{.Params.FlowId}}",
            "type": "inject",
            "z": "8900476a.91f358",
            "name": "",
            "topic": "",
            "payload": "",
            "payloadType": "date",
            "repeat": "{{.Params.Intervals}}",
            "crontab": "",
            "once": true,
            "onceDelay": 0.1,
            "x": 110,
            "y": 160,
            "wires": [
                [
                    "TS-MODBUS-GETTER-CONN-{{.Params.FlowId}}"
                ]
            ] 
        },
        {
            "id": "TS-MODBUS-GETTER-CONN-{{.Params.FlowId}}",
            "type": "modbus-getter",
            "z": "8900476a.91f358",
            "name": "CONN_TEST_{{.Params.FlowId}}",
            "showStatusActivities": false,
            "showErrors": false,
            "logIOActivities": false,
            "unitid": "",
            "dataType": "",
            "adr": "",
            "quantity": "",
            "server": "TS-MODBUS-SERVER-ID-{{.Params.FlowId}}",
            "useIOFile": false,
            "ioFile": "",
            "useIOForPayload": false,
            "x": 340,
            "y": 160,
            "wires": [
                [],
                []
            ]
        },      
        {{if .Enable}}
            {{.Params.AddressNode | convJsonStr}}
        {{end}}
        {
            "id": "TS-MODBUS-JOIN-{{.Params.FlowId}}",
            "type": "join",
            "z": "8900476a.91f358",
            "name": "MODBUS_JOIN",
            "mode": "custom",
            "build": "array",
            "property": "payload",
            "propertyType": "msg",
            "key": "topic",
            "joiner": "\\n",
            "joinerType": "str",
            "accumulate": false,
            "timeout": "1",
            "count": "{{.Params.AddressListCount}}",
            "reduceRight": false,
            "reduceExp": "",
            "reduceInit": "",
            "reduceInitType": "num",
            "reduceFixup": "",
            "x": 760,
            "y": 220,
            "wires": [
                [
                    "TS-MODBUS-JOIN-PARSER-{{.Params.FlowId}}"
                ]
            ]
        },
        {
            "id": "TS-MODBUS-JOIN-PARSER-{{.Params.FlowId}}",
            "type": "function",
            "z": "8900476a.91f358",
            "name": "MODBUS_JOIN_PARSER",
            "func": "var Total_item = {{.Params.AddressListCount}};\nvar value='';\n\nvar res = [\n            {\n                measurement:'modbus_{{.Params.influxID}}',\n                fields:{}\n            }\n            ];\n            \nfor(var i = 0; i < Total_item; i++){\n    value = msg.payload[i][0].fields;\n    for(var key in value){\n        res[0].fields[key]=value[key];\n    }\n}\n\nmsg.payload = res;\n\n\nreturn msg;",
            "outputs": 1,
            "noerr": 0,
            "x": 1060,
            "y": 280,
            "wires": [[
                {{if .Enable }} 
                  "TS-MODBUS-INFLUXDB-BATCH-{{.Params.FlowId}}",
                  "TS-MODBUS-INFLUX-CHECK-{{.Params.FlowId}}"
                  {{if .Publish }}
                  ,"TS-MODBUS-MQTT-FUNCTION-{{.Params.FlowId}}"
                  {{end}}
                {{end}}
              ]]
        },
        {
            "id": "TS-MODBUS-SERVER-ID-{{.Params.FlowId}}",
            "type": "modbus-client",
            "z": "b8db9bb5.5bd948",
            "name": "",
            "clienttype": "tcp",
            "bufferCommands": true,
            "stateLogEnabled": true,
            "tcpHost": "{{.Params.Host}}",
            "tcpPort": "{{.Params.Port}}",
            "tcpType": "DEFAULT",
            "serialPort": "/dev/ttyUSB",
            "serialType": "RTU-BUFFERD",
            "serialBaudrate": "9600",
            "serialDatabits": "8",
            "serialStopbits": "1",
            "serialParity": "none",
            "serialConnectionDelay": "100",
            "unit_id": "{{.Params.UnitId}}",
            "commandDelay": 1,
            "clientTimeout": "{{.Params.TimeOut}}",
            "reconnectTimeout": "{{.Params.ReTimeOut}}"
        },
        {
            "id": "TS-MODBUS-INFLUXDB-BATCH-{{.Params.FlowId}}",
            "type": "influxdb batch",
            "z": "8204efd4.29a1",
            "influxdb": "TS-MODBUS-INFLUXDB-{{.Params.FlowId}}",
            "precision": "",
            "retentionPolicy": "",
            "name": "",
            "x": 1370,
            "y": 280,
            "wires": []
        },
        {
            "id": "TS-MODBUS-INFLUXDB-{{.Params.FlowId}}",
            "type": "influxdb",
            "z": "8204efd4.29a1",
            "hostname": "{{.TsSettings.Influx.Host}}",
            "port": "{{.TsSettings.Influx.Port}}",
            "protocol": "http",
            "database": "{{.TsSettings.Influx.Database}}",
            "name": "",
            "usetls": false,
            "tls": ""
        },
        {
            "id": "TS-MODBUS-MQTT-FUNCTION-{{.Params.FlowId}}",
            "type": "function",
            "z": "87a95871.2b6618",
            "name": "",
            "func": "msg.qos = 2;\n//msg.topic = `thingspin/opcua/${msg.id}/data`;\nmsg.retain = true;\n\nreturn msg;",
            "outputs": 1,
            "noerr": 0,
            "x": 1310,
            "y": 320,
            "wires": [
                [
                    "TS-MODBUS-MQTT-EXPORT-{{.Params.FlowId}}"
                ]
            ]
        },
        {
            "id": "TS-MODBUS-MQTT-EXPORT-{{.Params.FlowId}}",
            "type": "mqtt out",
            "z": "87a95871.2b6618",
            "name": "MQTT",
            "topic": "/thingspin/modbus/{{.Params.influxID}}/data",
            "qos": "",
            "retain": "",
            "broker": "TS-MQTT-LISTENER-ID-{{.Params.FlowId}}",
            "x": 1430,
            "y": 320,
            "wires": []
        },
        {
            "id": "TS-MODBUS-STATUS-INJECT-{{.Params.FlowId}}",
            "type": "inject",
            "z": "d55018cc.35f148",
            "name": "init inject",
            "topic": "",
            "payload": "",
            "payloadType": "date",
            "repeat": "",
            "crontab": "",
            "once": true,
            "onceDelay": 0,
            "x": 560,
            "y": 120,
            "wires": [
                [
                    "TS-MODBUS-STATUS-FLOW-INIT-{{.Params.FlowId}}"
                ]
            ]
        },
        {
            "id": "TS-MODBUS-STATUS-FLOW-INIT-{{.Params.FlowId}}",
            "type": "function",
            "z": "d55018cc.35f148",
            "name": "flow init",
            "func": "msg.payload = flow.get('status');\nreturn msg;",
            "outputs": 1,
            "noerr": 0,
            "x": 700,
            "y": 120,
            "wires": [
                [
                    "TS-MODBUS-STATUS2-MQTT-OUT-{{.Params.FlowId}}"
                ]
            ]
        },
        {
            "id": "TS-MODBUS-STATUS2-MQTT-OUT-{{.Params.FlowId}}",
            "type": "mqtt out",
            "z": "d55018cc.35f148",
            "name": "",
            "topic": "/thingspin/modbus/{{.Params.influxID}}/status",
            "qos": "2",
            "retain": "true",
            "broker": "TS-MQTT-LISTENER-ID-{{.Params.FlowId}}",
            "x": 910,
            "y": 60,
            "wires": []
        },
        {
            "id": "TS-MODBUS-STATUS2-{{.Params.FlowId}}",
            "type": "status",
            "z": "d55018cc.35f148",
            "name": "",
            "scope": [
                "TS-MODBUS-INFLUX-CHECK-{{.Params.FlowId}}",
                "TS-MODBUS-MQTT-EXPORT-{{.Params.FlowId}}"
            ],
            "x": 560,
            "y": 160,
            "wires": [
                [
                    "TS-MODBUS-STATUS2-PROCESSING-{{.Params.FlowId}}"
                ]
            ]
        },
        {
            "id": "TS-MODBUS-STATUS2-PROCESSING-{{.Params.FlowId}}",
            "type": "function",
            "z": "d55018cc.35f148",
            "name": "status processing",
            "func": "const { status } = msg;\nconst stat = flow.get('status') || {\n    id: '{{.Params.FlowId}}',\n};\n\nstat[status.source.name] = status;\n\nflow.set('status', stat);\n\nmsg.payload = stat;\n\nreturn msg;",
            "outputs": 1,
            "noerr": 0,
            "x": 730,
            "y": 160,
            "wires": [
                [
                    "TS-MODBUS-STATUS2-MQTT-OUT-{{.Params.FlowId}}"
                ]
            ]
        },
        {
            "id": "TS-MODBUS-INFLUX-CHECK-{{.Params.FlowId}}",
            "type": "function",
            "z": "87a95871.2b6618",
            "name": "INFLUXDB",
            "func": "const { INFLUXDB } = flow.get('status');\nconst newStatus = msg.error\n? {\n    fill:\"red\",\n    shape: \"dot\",\n    text: msg.error.message,\n}\n: {\n    fill: \"green\",\n    shape: \"dot\",\n    text: \"active\",\n};\n\nif (!INFLUXDB || \n    newStatus.text !== INFLUXDB.text) {\n    node.status(newStatus);\n}\n",
            "outputs": 1,
            "noerr": 0,
            "x": 1330,
            "y": 240,
            "wires": [
                []
            ]
        },
        {
            "id": "TS-MODBUS-CATCH-INFLUX-CHECK-{{.Params.FlowId}}",
            "type": "catch",
            "z": "87a95871.2b6618",
            "name": "",
            "scope": [
                "TS-MODBUS-INFLUXDB-BATCH-{{.Params.FlowId}}"
            ],
            "uncaught": false,
            "x": 1150,
            "y": 240,
            "wires": [
                [
                    "TS-MODBUS-INFLUX-CHECK-{{.Params.FlowId}}"
                ]
            ]
        }
    ]
}