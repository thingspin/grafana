{
  "label": "{{.Params.FlowId}}",
  "info": "",
  "nodes": [
    {  
      "id":"TS-OPC-UA-COMMENT-{{.Params.FlowId}}",
      "type":"comment",
      "name":"OPC/UA : {{.Name}}",
      "info":"",
      "x":140,
      "y":60,
      "wires":[[]]
    },
    {
        "id": "TS-OPC-UA-INJECT-INIT-{{.Params.FlowId}}",
        "type": "inject",
        "name": "init inject",
        "topic": "",
        "payload": "",
        "payloadType": "date",
        "repeat": "",
        "crontab": "",
        "once": true,
        "onceDelay": 0,
        "x": 320,
        "y": 60,
        "wires": [
            [
                "TS-OPC-UA-INIT-FUNC-{{.Params.FlowId}}"
            ]
        ]
    },
    {
        "id": "TS-OPC-UA-INIT-FUNC-{{.Params.FlowId}}",
        "type": "function",
        "name": "flow init",
        "func": "msg.payload = flow.get('status');\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "x": 480,
        "y": 60,
        "wires": [
            [ "TS-FLOW-STATUS-PUBLISH-{{.Params.FlowId}}" ]
        ]
    },
    {
      "id": "TS-FLOW-STATUS-LISTENER-{{.Params.FlowId}}",
      "type": "status",
      "name": "",
      "scope": [
          "TS-ADD-INFLUXDB-STAT-FUNC-ID-{{.Params.FlowId}}",
          "TS-ADD-MQTT-ID-{{.Params.FlowId}}",
          "TS-OPC-UA-BROWSER-ID-{{.Params.FlowId}}"
      ],
      "x": 100,
      "y": 120,
      "wires": [
          [
              "TS-FLOW-STATUS-FUNC-ID-{{.Params.FlowId}}"
          ]
      ]
    },
    {
        "id": "TS-FLOW-STATUS-FUNC-ID-{{.Params.FlowId}}",
        "type": "function",
        "name": "status processing",
        "func": "const { status } = msg;\nconst stat = flow.get('status') || {\n    id: '{{.Params.FlowId}}',\n};\n\nstat[status.source.name] = status;\n\nflow.set('status', stat);\n\nmsg.payload = stat;\n\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "x": 330,
        "y": 120,
        "wires": [
          [ "TS-FLOW-STATUS-PUBLISH-{{.Params.FlowId}}" ]
        ]
    },
    {
      "id": "TS-FLOW-STATUS-PUBLISH-{{.Params.FlowId}}",
      "type": "mqtt out",
      "name": "",
      "topic": "/thingspin/opcua/{{.Id}}/status",
      "qos": "2",
      "retain": "true",
      "broker": "TS-MQTT-LISTENER-ID-{{.Params.FlowId}}",
      "x": 940,
      "y": 120,
      "wires": []
    },
    {
      "id": "TS-OPC-UA-READ-ID-{{.Params.FlowId}}",
      "type": "OPCUA-IIoT-Read",
      "attributeId": 0,
      "maxAge": 1,
      "depth": 1,
      "connector": "TS-OPC-UA-CONNECT-ID-{{.Params.FlowId}}",
      "name": "{{.Params.FlowId}}",
      "justValue": true,
      "showStatusActivities": false,
      "showErrors": false,
      "parseStrings": false,
      "historyDays": 1,
      "x": 310,
      "y": 240,
      "wires": [["TS-OPC-UA-READ-PARSER-FUNC-ID-{{.Params.FlowId}}"]]
    },
    {
      "id": "TS-OPC-UA-READ-STAT-ID-{{.Params.FlowId}}",
      "type": "status",
      "name": "",
      "scope": ["TS-OPC-UA-READ-ID-{{.Params.FlowId}}"],
      "x": 100,
      "y": 160,
      "wires": [["TS-OPC-UA-STATUS-FUNC-ID-{{.Params.FlowId}}"]]
    },
    {
      "id": "TS-OPC-UA-BROWSER-HTTP-GET-ID-{{.Params.FlowId}}",
      "type": "http in",
      "name": "",
      "url": "/opcua/{{.Params.FlowId}}/browser",
      "method": "get",
      "upload": false,
      "swaggerDoc": "",
      "x": 140,
      "y": 380,
      "wires": [["TS-OPC-UA-BROWSER-FUNC-ID-{{.Params.FlowId}}"]]
    },
    {
      "id": "TS-OPC-UA-BROWSER-ID-{{.Params.FlowId}}",
      "type": "OPCUA-IIoT-Browser",
      "connector": "TS-OPC-UA-CONNECT-ID-{{.Params.FlowId}}",
      "nodeId": "",
      "name": "connect",
      "justValue": false,
      "sendNodesToRead": false,
      "sendNodesToListener": false,
      "sendNodesToBrowser": true,
      "singleBrowseResult": false,
      "recursiveBrowse": true,
      "recursiveDepth": 1,
      "delayPerMessage": 0.2,
      "showStatusActivities": false,
      "showErrors": false,
      "x": 460,
      "y": 380,
      "wires": [["TS-OPC-UA-BROWSER-HTTP-RESPONSE-ID-{{.Params.FlowId}}"]]
    },
    {
      "id": "TS-OPC-UA-BROWSER-HTTP-RESPONSE-ID-{{.Params.FlowId}}",
      "type": "http response",
      "name": "",
      "statusCode": "",
      "headers": {},
      "x": 870,
      "y": 380,
      "wires": []
    },
    {
      "id": "TS-OPC-UA-BROWSER-FUNC-ID-{{.Params.FlowId}}",
      "type": "function",
      "name": "",
      "func": "const nodeId = msg.payload.nodeid || 'ns=0;i=85';\nmsg['addressSpaceItems'] = [\n  {\n    name: \"sample\",\n    nodeId,\n    datatypeName: \"\",\n  }\n];\nreturn msg;",
      "outputs": 1,
      "noerr": 0,
      "x": 310,
      "y": 380,
      "wires": [["TS-OPC-UA-BROWSER-ID-{{.Params.FlowId}}"]]
    },
    {
      "id": "TS-OPC-UA-STATUS-FUNC-ID-{{.Params.FlowId}}",
      "type": "function",
      "name": "",
      "func": "const { status } = msg;\nconst stat = global.get('ts-status') || {};\nif(stat[status.source.name] !== status.fill) {\n    msg.payload = status.fill;\n}\nstat[status.source.name] = status.fill;\nglobal.set('ts-status', stat);\nreturn msg;",
      "outputs": 1,
      "noerr": 0,
      "x": 290,
      "y": 160,
      "wires": [["TS-OPC-UA-STATUS-MQTT-OUT-ID-{{.Params.FlowId}}"]]
    },
    {
      "id": "TS-OPC-UA-STATUS-HTTP-GET-ID-{{.Params.FlowId}}",
      "type": "http in",
      "name": "",
      "url": "/opcua/{{.Params.FlowId}}/status",
      "method": "get",
      "upload": false,
      "swaggerDoc": "",
      "x": 140,
      "y": 440,
      "wires": [["TS-OPC-UA-STATUS-HTTP-GET-FUNC-ID-{{.Params.FlowId}}"]]
    },
    {
      "id": "TS-OPC-UA-STATUS-HTTP-GET-FUNC-ID-{{.Params.FlowId}}",
      "type": "function",
      "name": "",
      "func": "const {url} = msg.req;\nconst list = url.split(\"/\");\nconst id = list[list.length-2];\nconst status = global.get('ts-status');\nmsg.payload = status[id];\nreturn msg;",
      "outputs": 1,
      "noerr": 0,
      "x": 310,
      "y": 440,
      "wires": [["TS-OPC-UA-STATUS-HTTP-RESPONSE-ID-{{.Params.FlowId}}"]]
    },
    {
      "id": "TS-OPC-UA-STATUS-HTTP-RESPONSE-ID-{{.Params.FlowId}}",
      "type": "http response",
      "name": "",
      "statusCode": "",
      "headers": {},
      "x": 870,
      "y": 440,
      "wires": []
    },
    {
      "id": "TS-OPC-UA-STATUS-MQTT-OUT-ID-{{.Params.FlowId}}",
      "type": "mqtt out",
      "z": "9d5a2adb.d70968",
      "name": "",
      "topic": "/thingspin/connect/{{.Params.FlowId}}/status",
      "qos": "2",
      "retain": "true",
      "broker": "TS-MQTT-LISTENER-ID-{{.Params.FlowId}}",
      "x": 970,
      "y": 160,
      "wires": []
    },
    {
      "id": "TS-OPC-UA-READ-PARSER-FUNC-ID-{{.Params.FlowId}}",
      "type": "function",
      "name": "OPC/UA Parser",
      "func": "const { addressSpaceItems, payload } = msg;\n\nlet obj = {};\n\naddressSpaceItems.forEach((item, index) => {\n    const node = payload[index];\n    obj[node.browseName.name] = node.value;\n});\n\nmsg.payload = obj;\nmsg.id = {{.Id}};\n\n\nreturn msg;",
      "outputs": 1,
      "noerr": 0,
      "x": 480,
      "y": 240,
      "wires": [[
        {{if .Enable }} 
          "TS-CONV-INFLUXDB-PAYLOAD-FUNC-ID-{{.Params.FlowId}}"
          {{if .Publish }}
          ,"TS-CONV-MQTT-PAYLOAD-FUNC-ID-{{.Params.FlowId}}"
          {{end}}
        {{end}}
      ]]
    },
    {
      "id": "TS-OPC-UA-READ-INJECT-ID-{{.Params.FlowId}}",
      "type": "OPCUA-IIoT-Inject",
      "injectType": "inject",
      "payload": "",
      "payloadType": "date",
      "topic": "",
      "repeat": "{{.Intervals}}",
      "crontab": "",
      "once": true,
      "startDelay": "",
      "name": "",
      "addressSpaceItems": {{.Params.nodes | convJsonStr}},
      "x": 140,
      "y": 240,
      "wires": [["TS-OPC-UA-READ-ID-{{.Params.FlowId}}"]]
    },
    {
      "id": "TS-CONV-INFLUXDB-PAYLOAD-FUNC-ID-{{.Params.FlowId}}",
      "type": "function",
      "name": "",
      "func": "const { payload, id } = msg;\n\nconst result = [];\nif (Array.isArray(payload)) {\n    for(const item of payload) {\n        result.push({\n            measurement: 'opcua_' + id,\n            fields: {\n                ...item,\n            },\n        });\n    }\n} else {\n    result.push({\n        measurement: 'opcua_' + id,\n        fields: {\n            ...payload,\n        },\n    });\n}\nmsg.payload = result;\n\nreturn msg;",
      "outputs": 1,
      "noerr": 0,
      "x": 690,
      "y": 240,
      "wires": [
          [
              "TS-ADD-INFLUXDB-ID-{{.Params.FlowId}}",
              "TS-ADD-INFLUXDB-STAT-FUNC-ID-{{.Params.FlowId}}"
          ]
      ]
    },
    {
      "id": "TS-ADD-INFLUXDB-ID-{{.Params.FlowId}}",
      "type": "influxdb batch",
      "influxdb": "TS-INFLUXDB-NODE-ID-{{.Params.FlowId}}",
      "precision": "",
      "retentionPolicy": "",
      "name": "",
      "x": 950,
      "y": 240,
      "wires": []
    },
    {
      "id": "TS-CONV-MQTT-PAYLOAD-FUNC-ID-{{.Params.FlowId}}",
      "type": "function",
      "name": "",
      "func": "msg.qos = 2;\nmsg.topic = `thingspin/opcua/${msg.id}/data`;\nmsg.retain = true;\n\nreturn msg;",
      "outputs": 1,
      "noerr": 0,
      "x": 690,
      "y": 340,
      "wires": [
        [ "TS-ADD-MQTT-ID-{{.Params.FlowId}}" ]
      ]
    },
    {
        "id": "TS-ADD-INFLUXDB-CATCH-{{.Params.FlowId}}",
        "type": "catch",
        "name": "",
        "scope": [
            "TS-ADD-INFLUXDB-ID-{{.Params.FlowId}}"
        ],
        "uncaught": false,
        "x": 690,
        "y": 280,
        "wires": [
            [ "TS-ADD-INFLUXDB-STAT-FUNC-ID-{{.Params.FlowId}}" ]
        ]
    },
    {
        "id": "TS-ADD-INFLUXDB-STAT-FUNC-ID-{{.Params.FlowId}}",
        "type": "function",
        "name": "INFLUXDB",
        "func": "const { INFLUXDB } = flow.get('status');\nconst newStatus = msg.error\n? {\n    fill:\"red\",\n    shape: \"dot\",\n    text: msg.error.message,\n}\n: {\n    fill: \"green\",\n    shape: \"dot\",\n    text: \"active\",\n};\n\nif(newStatus.text !== INFLUXDB.text) {\n    node.status(newStatus);\n}\n",
        "outputs": 1,
        "noerr": 0,
        "x": 870,
        "y": 280,
        "wires": [
            []
        ]
    },
    {
      "id": "TS-ADD-MQTT-ID-{{.Params.FlowId}}",
      "type": "mqtt out",
      "name": "MQTT",
      "topic": "/thingspin/opcua/{{.Id}}/data",
      "broker": "TS-MQTT-LISTENER-ID-{{.Params.FlowId}}",
      "x": 930,
      "y": 340,
      "wires": []
    }
  ],
  "configs": [
    {
      "id": "TS-OPC-UA-CONNECT-ID-{{.Params.FlowId}}",
      "type": "OPCUA-IIoT-Connector",
      "z": "",
      "discoveryUrl": "",
      "endpoint": "{{.Params.EndpointUrl}}",
      "keepSessionAlive": true,
      "loginEnabled": false,
      "securityPolicy": "None",
      "securityMode": "NONE",
      "name": "REMOTE SERVER-{{.Params.FlowId}}",
      "showErrors": false,
      "individualCerts": false,
      "publicCertificateFile": "",
      "privateKeyFile": "",
      "defaultSecureTokenLifetime": "",
      "endpointMustExist": false,
      "autoSelectRightEndpoint": false,
      "strategyMaxRetry": "",
      "strategyInitialDelay": "",
      "strategyMaxDelay": "",
      "strategyRandomisationFactor": "",
      "requestedSessionTimeout": "",
      "connectionStartDelay": "",
      "reconnectDelay": "",
      "maxBadSessionRequests": "10"
    },
    {
      "id": "TS-MQTT-LISTENER-ID-{{.Params.FlowId}}",
      "type": "mqtt-broker",
      "z": "",
      "broker": "{{.TsSettings.Mqtt.Host}}",
      "port": "{{.TsSettings.Mqtt.Port}}",
      "clientid": "",
      "usetls": false,
      "compatmode": true,
      "keepalive": "60",
      "cleansession": true,
      "birthTopic": "",
      "birthQos": "0",
      "birthPayload": "",
      "closeTopic": "",
      "closeQos": "0",
      "closePayload": "",
      "willTopic": "",
      "willQos": "0",
      "willPayload": ""
    },
    {
      "id": "TS-INFLUXDB-NODE-ID-{{.Params.FlowId}}",
      "type": "influxdb",
      "hostname": "{{.TsSettings.Influx.Host}}",
      "port": "{{.TsSettings.Influx.Port}}",
      "protocol": "http",
      "database": "{{.TsSettings.Influx.Database}}",
      "name": "",
      "usetls": false,
      "tls": ""
    }
  ]
}
